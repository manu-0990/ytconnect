generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int            @id @default(autoincrement())
  name                  String?
  image                 String?
  email                 String         @unique
  role                  Role?
  emailVerified         DateTime?
  accounts              Account[]
  sessions              Session[]
  editor                Editor?
  creator               Creator?
  recievedNotifications Notification[] @relation("ReceivedNotifications")
  sentNotification      Notification[] @relation("SentNotifications")
}

model Account {
  id                       Int     @id @default(autoincrement())
  userId                   Int
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
  expires      DateTime
}

model Editor {
  id        Int       @id
  user      User      @relation(fields: [id], references: [id])
  creatorId Int?
  creator   Creator?  @relation(fields: [creatorId], references: [id])
  videos    Video[]
  projects  Project[]
}

model Creator {
  id       Int       @id
  user     User      @relation(fields: [id], references: [id])
  editors  Editor[]
  projects Project[]
}

model Video {
  id          Int         @id @default(autoincrement())
  thumbnail   Thumbnail[]
  title       String
  description String?
  videoLink   String
  editorId    Int
  projectId   Int
  editor      Editor      @relation(fields: [editorId], references: [id])
  Project     Project?
}

model Thumbnail {
  id      Int
  videoId Int
  video   Video  @relation(fields: [videoId], references: [id])
  url     String

  @@id([id, videoId])
}

model Project {
  id            Int            @id @default(autoincrement())
  status        Status         @default(PENDING)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  editorId      Int
  creatorId     Int
  videoId       Int            @unique
  reviews       Review?
  editor        Editor         @relation(fields: [editorId], references: [id])
  creator       Creator        @relation(fields: [creatorId], references: [id])
  video         Video          @relation(fields: [videoId], references: [id])
  notifications Notification[]
}

model Review {
  id          Int      @id @default(autoincrement())
  projectId   Int      @unique
  project     Project  @relation(fields: [projectId], references: [id])
  title       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Notification {
  id          Int              @id @default(autoincrement())
  recipientId Int
  recipient   User             @relation("ReceivedNotifications", fields: [recipientId], references: [id], onDelete: Cascade)
  senderId    Int?
  sender      User?            @relation("SentNotifications", fields: [senderId], references: [id], onDelete: SetNull)
  type        NotificationType
  message     String
  read        Boolean          @default(false)
  createdAt   DateTime         @default(now())
  projectId   Int?
  project     Project?         @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([recipientId])
  @@index([recipientId, read])
}

enum Role {
  CREATOR
  EDITOR
}

enum Status {
  PENDING
  REVIEW
  ACCEPTED
  REJECTED
}

enum RequestType {
  INVITE
  REQUEST
}

enum NotificationType {
  EDITOR_INVITE
  EDITOR_JOIN_REQUEST
  JOIN_ACCEPTED
  JOIN_REJECTED
  EDITOR_REMOVED

  PROJECT_ASSIGNED
  PROJECT_STATUS_UPDATE
  NEW_REVIEW
  PROJECT_COMMENT

  NEW_MESSAGE

  VIDEO_UPLOADED
  VIDEO_READY

  SYSTEM_ALERT
}
